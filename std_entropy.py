import numpy as np
import bisect

std_entropy_T_20 = np.arange(200, 800, 20)
std_entropy_T_50 = np.arange(800, 3050, 50)
std_entropy_T = np.append(std_entropy_T_20, std_entropy_T_50)

std_entropy_s = [
6.46260,
6.55812,
6.64535,
6.72562,
6.79998,
6.83521,
6.86305,
6.86926,
6.93413,
6.99515,
7.05276,
7.10735,
7.15926,
7.20875,
7.25607,
7.30142,
7.34499,
7.38692,
7.42736,
7.46642,
7.50422,
7.54084,
7.57638,
7.61090,
7.64448,
7.67717,
7.70903,
7.74010,
7.77044,
7.80008,
7.82905,
7.85740,
7.88514,
7.95207,
8.01581,
8.07667,
8.13493,
8.19081,
8.24449,
8.24449,
8.29616,
8.34596,
8.39402,
8.44046,
8.48539,
8.52891,
8.57111,
8.61208,
8.65185,
8.69051,
8.72811,
8.76472,
8.80039,
8.83516,
8.86908,
8.90219,
8.93452,
8.96611,
8.99699,
9.02721,
9.05678,
9.08573,
9.11409,
9.14189,
9.16913,
9.19586,
9.22208,
9.24781,
9.27308,
9.29790,
9.32228,
9.34625,
9.36980,
9.39297,
9.41576,
9.43818,
9.46025,
9.48198
]

def interp(A1, A2, B1, B2, A):
	return B1 - (B1 - B2) * (A1 - A) / (A1 - A2)

def snot(T):

	assert T >= std_entropy_T[0]
	assert T <= std_entropy_T[-1]

	i = bisect.bisect(std_entropy_T, T)

	if i == len(std_entropy_T):
		i = 74

	A1 = std_entropy_T[i-1]
	A2 = std_entropy_T[i]

	B1 = std_entropy_s[i-1]
	B2 = std_entropy_s[i]

	return interp(A1, A2, B1, B2, T)


